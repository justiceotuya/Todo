{"version":3,"sources":["components/Todo/Todo.module.scss","components/InputComponent/InputComponent.jsx","components/ListComponent/ListComponent.jsx","components/Todo/Todo.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","container","todoAddItem","todoAddItem__input","todoAddItem__button","todoItems","todoItems__item","todoItems__checkbox","todoItems__empty","InputComponent","props","handleInput","handleAddItem","value","react_default","a","createElement","className","styles","onSubmit","type","placeholder","onChange","ListComponent","items","handleCheckboxClick","length","map","item","index","htmlFor","name","key","concat","id","onClick","Todo","_useState","useState","_useState2","Object","slicedToArray","setItems","_useState3","_useState4","input","setInput","components_InputComponent_InputComponent","e","target","event","preventDefault","filter","arrayItem","splice","App","components_Todo_Todo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,UAAA,wBAAAC,YAAA,0BAAAC,mBAAA,iCAAAC,oBAAA,kCAAAC,UAAA,wBAAAC,gBAAA,8BAAAC,oBAAA,kCAAAC,iBAAA,oQCoBHC,EAjBQ,SAAAC,GAAS,IACtBC,EAAsCD,EAAtCC,YAAaC,EAAyBF,EAAzBE,cAAeC,EAAUH,EAAVG,MACpC,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOhB,YAAaiB,SAAUP,GAC7CE,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLH,UAAWC,IAAOf,mBAClBkB,YAAY,gBACZC,SAAUX,EACVE,MAAOA,IAETC,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASH,UAAWC,IAAOd,qBAAxC,YCXSmB,EAAA,SAAAb,GAAS,IACdc,EAA+Bd,EAA/Bc,MAAOC,EAAwBf,EAAxBe,oBACf,OAAwB,IAAjBD,EAAME,OACXF,EAAMG,IAAI,SAACC,EAAMC,GACf,OAEEf,EAAAC,EAAAC,cAAA,SACEc,QAASF,EACTX,UAAWC,IAAOZ,gBAClByB,KAAK,WACLC,IAAG,GAAAC,OAAKL,EAAL,KAAAK,OAAaJ,IAEhBf,EAAAC,EAAAC,cAAA,SACEC,UAAWC,IAAOX,oBAClBa,KAAK,WACLW,KAAMH,EACNM,GAAIN,EACJO,QAAS,kBAAMV,EAAoBG,MAEpCA,KAKPd,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOV,kBAAvB,2BCmBW4B,EA1CF,WAAM,IAAAC,EAESC,mBAAS,IAFlBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEVb,EAFUe,EAAA,GAEHG,EAFGH,EAAA,GAAAI,EAGSL,mBAAS,IAHlBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGVE,EAHUD,EAAA,GAGHE,EAHGF,EAAA,GA+BjB,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOjB,WACrBa,EAAAC,EAAAC,cAAC+B,EAAD,CAAgBpC,YA3BA,SAAAqC,GAClBF,EAASE,EAAEC,OAAOpC,QA0B0BD,cAvBxB,SAAAsC,GACpBA,EAAMC,iBAEQ,KAAVN,GAAcH,EAASlB,EAAMS,OAAOY,IAExCC,EAAS,KAkBiEjC,MAAOgC,IAE/E/B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOb,WACrBS,EAAAC,EAAAC,cAACO,EAAD,CAAeC,MAAOA,EAAOC,oBAlBP,SAAAG,GAE1BJ,EAAM4B,OAAO,SAACC,EAAWxB,GAOvB,OALIwB,IAAczB,GAEhBJ,EAAM8B,OAAOzB,EAAO,GAGfa,EAASlB,WCvBP+B,mLAHX,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,aAFOC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.53d7f35f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Todo_container__1irzR\",\"todoAddItem\":\"Todo_todoAddItem__l8lEk\",\"todoAddItem__input\":\"Todo_todoAddItem__input__7x3Ss\",\"todoAddItem__button\":\"Todo_todoAddItem__button__nMLDT\",\"todoItems\":\"Todo_todoItems__3BGhQ\",\"todoItems__item\":\"Todo_todoItems__item__3uE-s\",\"todoItems__checkbox\":\"Todo_todoItems__checkbox__Wmpnl\",\"todoItems__empty\":\"Todo_todoItems__empty__1JHWJ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../Todo/Todo.module.scss';\n\nconst InputComponent = props => {\n  const { handleInput, handleAddItem, value } = props;\n  return (\n    <form className={styles.todoAddItem} onSubmit={handleAddItem}>\n      <input\n        type=\"text\"\n        className={styles.todoAddItem__input}\n        placeholder=\"Create a task\"\n        onChange={handleInput}\n        value={value}\n      />\n      <button type=\"submit\" className={styles.todoAddItem__button}>\n        &rarr;\n      </button>\n    </form>\n  );\n};\nexport default InputComponent;\n\nInputComponent.propTypes = {\n  handleInput: PropTypes.func.isRequired,\n  handleAddItem: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport styles from '../Todo/Todo.module.scss';\n// import PropTypes from 'prop-types';\n\nexport default props => {\n  const { items, handleCheckboxClick } = props;\n  return items.length !== 0 ? (\n    items.map((item, index) => {\n      return (\n        // <div >\n        <label\n          htmlFor={item}\n          className={styles.todoItems__item}\n          name=\"checkbox\"\n          key={`${item}_${index}`}\n        >\n          <input\n            className={styles.todoItems__checkbox}\n            type=\"checkbox\"\n            name={item}\n            id={item}\n            onClick={() => handleCheckboxClick(item)} //pass the item as argument\n          />\n          {item}\n        </label>\n      );\n    })\n  ) : (\n    <div className={styles.todoItems__empty}>Add items to this list</div>\n  );\n};\n","import React, { useState } from 'react';\nimport styles from './Todo.module.scss';\nimport InputComponent from '../InputComponent/InputComponent';\nimport ListComponent from '../ListComponent/ListComponent';\n\nconst Todo = () => {\n  // declare hooks\n  const [items, setItems] = useState([]); // declare items as array\n  const [input, setInput] = useState('');\n\n  // input state contains inputed value\n  const handleInput = e => {\n    setInput(e.target.value);\n  };\n\n  const handleAddItem = event => {\n    event.preventDefault();\n    // push inputed value into items state value\n    if (input !== '') setItems(items.concat(input));\n    // set the input value to empty\n    setInput('');\n  };\n\n  const handleCheckboxClick = item => {\n    //filter the array\n    items.filter((arrayItem, index) => {\n      //check if item in the array is same as item passed in the handleCheckboxClick argument\n      if (arrayItem === item) {\n        // if it is the same, remove it from the items array\n        items.splice(index, 1);\n      }\n      // set the items state to show item hasben removed\n      return setItems(items);\n    });\n  };\n\n  return (\n    <div className={styles.container}>\n      <InputComponent handleInput={handleInput} handleAddItem={handleAddItem} value={input} />\n\n      <div className={styles.todoItems}>\n        <ListComponent items={items} handleCheckboxClick={handleCheckboxClick} />\n      </div>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './components/Todo/Todo';\n\nclass App extends Component {\n  render() {\n    return <Todo />;\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}